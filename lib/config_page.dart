import 'dart:ffi';
import 'dart:io';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:flutter/widgets.dart';
import 'package:intl/intl.dart';
import 'dart:ui';
import 'dart:async';
import 'package:shop_pro/font_sizes.dart';
import 'package:device_info_plus/device_info_plus.dart';
import 'api_services.dart';
import 'db_operations.dart';
import 'logger.dart';
import 'model_api_config.dart';
import 'dart:math' as math;

class ConfigPage extends StatefulWidget {
  @override
  _WelcomePageState createState() => _WelcomePageState();
}

class _WelcomePageState extends State<ConfigPage>
    with SingleTickerProviderStateMixin {
  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();
  static const String fontFamily = 'Lato';
  TextEditingController ipAddressController = TextEditingController();
  TextEditingController portNoController = TextEditingController();
  TextEditingController clientIDController = TextEditingController();
  TextEditingController activationController = TextEditingController();
  FocusNode? _focusNodeIp;
  FocusNode? _focusNodePort;
  FocusNode? _focusNodeClientID;
  FocusNode? _focusNodeActivation;
  String? _selectedCurrency;
  List<String> currencyCodes = [
    'BHD', // Bahraini Dinar
    'KWD', // Kuwaiti Dinar
    'OMR', // Omani Rial
    'QAR', // Qatari Riyal
    'SAR', // Saudi Riyal
    'AED', // UAE Dirham
  ];
  String? _selectedVoice;
  List<String> voiceCodes = [
    'VOICE1',
    'VOICE2',
    'VOICE3',
    'VOICE4',
  ];
  bool _imgScrollCheck = false;
  bool _videoScrollCheck = false;
  bool _textScrollCheck = false;
  String _selectedScrollOption =
      'IMAGE'; // Default selected option for the group
  late var fontSizes;
  final ScrollController scrollController = ScrollController();
  String statusMsg = '';
  List<String> statusMessages = [];
  Timer? _timer;
  late AnimationController animationController;
  final ScrollController _scrollController = ScrollController();
  final ApiHelper _apiHelper = ApiHelper();
  bool actRandom =
      false; // TO indicate that the activation code is generated by random function or system serial number.
  final dbProvider = DBProvider.db;
  ApiDataModel apiData = ApiDataModel(
    serverIP: '',
    portNo: '',
    currency: '',
    voice: '',
    clientID: '',
    actCode: '',
    imageScroll: '',
    videoScroll: '',
    textScroll: '',
    dateTime: '',
  );
  int _imgScrollCount = 1; // Initial count

  @override
  initState() {
    super.initState();
    animationController =
        AnimationController(duration: const Duration(seconds: 2), vsync: this);
    animationController.repeat();
    _focusNodeIp = FocusNode();
    _focusNodePort = FocusNode();
    loadDbData();
    _hideSystemBars();
  }

  @override
  void dispose() {
    SystemChrome.setEnabledSystemUIMode(SystemUiMode.manual, overlays: []);
    scrollController.dispose();
    _scrollController.dispose();
    _timer?.cancel();
    ipAddressController.dispose();
    portNoController.dispose();
    clientIDController.dispose();
    activationController.dispose();
    _focusNodeIp?.dispose();
    _focusNodePort?.dispose();
    _focusNodeClientID?.dispose();
    _focusNodeActivation?.dispose();
    animationController.dispose(); // Properly dispose of the AnimationController
    super.dispose();
  }

  void _hideSystemBars() {
    // Hides both the status bar and the navigation bar
    SystemChrome.setEnabledSystemUIMode(SystemUiMode.immersiveSticky);
    // Optional: Make the system navigation bar and status bar transparent
    SystemChrome.setSystemUIOverlayStyle(const SystemUiOverlayStyle(
      statusBarColor: Colors.transparent,
      systemNavigationBarColor: Colors.transparent,
    ));
  }

  Widget _title() {
    return RichText(
      textAlign: TextAlign.center,
      text: TextSpan(
          text: 'S',
          style: GoogleFonts.portLligatSans(
            textStyle: Theme.of(context).textTheme.bodyLarge,
            fontSize: fontSizes.largerFontSize10,
            fontWeight: FontWeight.w700,
            color: Colors.redAccent,
          ),
          children: [
            TextSpan(
              text: 'ystem',
              style: TextStyle(
                  color: Colors.black,
                  fontSize: fontSizes.largerFontSize9,
                  fontWeight: FontWeight.w900),
            ),
            TextSpan(
              text: ' C',
              style: TextStyle(
                  color: Colors.blueAccent,
                  fontSize: fontSizes.largerFontSize10,
                  fontWeight: FontWeight.w900),
            ),
            TextSpan(
              text: 'onfig',
              style: TextStyle(
                  color: Colors.black, fontSize: fontSizes.largerFontSize9),
            ),
          ]),
    );
  }

  Widget _ipAddress() {
    return Container(
      width: MediaQuery.of(context).size.width / 2.5,
      height: 50,
      alignment: Alignment.center,
      child: TextFormField(
        keyboardType: const TextInputType.numberWithOptions(decimal: true),
        inputFormatters: [
          FilteringTextInputFormatter.allow(RegExp(r'[0-9.]')),
          LengthLimitingTextInputFormatter(15),
        ],
        onEditingComplete: () {
          FocusScope.of(context).requestFocus(_focusNodePort);
        },
        textAlign: TextAlign.left,
        focusNode: _focusNodeIp,
        autofocus: true,
        obscureText: false,
        controller: ipAddressController,
        style: TextStyle(
            fontSize: fontSizes.baseFontSize, height: 1, color: Colors.black),
        decoration: InputDecoration(
          isDense: true,
          prefixIcon: Padding(
            padding: const EdgeInsets.only(left: 0),
            child: Icon(
              Icons.lan,
              size: fontSizes.largerFontSize4,
              color: Colors.blue,
            ),
          ),
          suffixIcon: IconButton(
            icon: const Icon(
              Icons.close, // X icon
              color: Colors.black,
            ),
            onPressed: () {
              ipAddressController.clear(); // Clear the text field
            },
          ),
          fillColor: Colors.black,
          border: OutlineInputBorder(
            borderSide: const BorderSide(color: Colors.black, width: 5.00),
            borderRadius: BorderRadius.circular(2.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderSide: const BorderSide(color: Colors.blue),
            borderRadius: BorderRadius.circular(2.0),
          ),
          labelText: ' IP ADDRESS',
          labelStyle:
              TextStyle(color: Colors.black, fontSize: fontSizes.baseFontSize),
        ),
        validator: validateIpAddress, // Add the validator here
      ),
    );
  }

  Widget _portNo() {
    return Container(
        width: MediaQuery.of(context).size.width / 2.5,
        height: 50,
        alignment: Alignment.center,
        child: TextFormField(
            keyboardType: const TextInputType.numberWithOptions(decimal: true),
            inputFormatters: [
              FilteringTextInputFormatter.allow(RegExp(r'[0-9]')),
              LengthLimitingTextInputFormatter(6),
            ],
            onEditingComplete: () => FocusScope.of(context).nextFocus(),
            textAlign: TextAlign.left,
            focusNode: _focusNodePort,
            autofocus: true,
            obscureText: false,
            controller: portNoController,
            style: TextStyle(
                fontSize: fontSizes.baseFontSize,
                height: 1,
                color: Colors.black),
            decoration: InputDecoration(
              isDense: true,
              prefixIcon: Padding(
                padding: EdgeInsets.only(left: 0),
                child: Icon(
                  Icons.private_connectivity,
                  size: fontSizes.largerFontSize4,
                  color: Colors.blue,
                ),
              ),
              suffixIcon: IconButton(
                icon: const Icon(
                  Icons.close, // X icon
                  color: Colors.black,
                ),
                onPressed: () {
                  portNoController.clear(); // Clear the text field
                },
              ),
              fillColor: Colors.white,
              border: OutlineInputBorder(
                borderSide: const BorderSide(color: Colors.black, width: 5.00),
                borderRadius: BorderRadius.circular(2.0),
              ),
              focusedBorder: OutlineInputBorder(
                borderSide: const BorderSide(color: Colors.blue),
                borderRadius: BorderRadius.circular(2.0),
              ),
              labelText: ' PORT NO',
              labelStyle: TextStyle(
                  color: Colors.black, fontSize: fontSizes.baseFontSize),
            )));
  }

  Widget _testButton() {
    return InkWell(
      onTap: () async {
        _addStatusMessage('TESTING SERVER CONNECTION...');
        _addStatusMessage('CONNECTING TO SERVER...');
        //TODO
        // _apiHelper.updateBaseUrl(
        //     ipAddressController.text, portNoController.text);
        // try {
        //   if (await _apiHelper.testConnectivity()) {
        //     _addStatusMessage('SERVER CONNECTION SUCCESS...');
        //   } else {
        //     _addStatusMessage('SERVER CONNECTION FAILURE...');
        //   }
        // } catch (e) {
        //   _addStatusMessage('SERVER CONNECTION FAILURE...');
        // }
      },
      child: Container(
        width: MediaQuery.of(context).size.width / 2.5,
        height: 50,
        alignment: Alignment.center,
        decoration: const BoxDecoration(
          borderRadius: BorderRadius.all(Radius.circular(10)),
          color: Colors.red,
        ),
        child: Text(
          'TEST',
          style: TextStyle(
              fontSize: fontSizes.baseFontSize,
              color: Colors.black), // Adjusted font size to match others
        ),
      ),
    );
  }

  Widget _saveButton() {
    return InkWell(
      onTap: () async {
        if (validateSysConfigData()) {
          setState(() {
            apiData.serverIP = ipAddressController.text;
            apiData.portNo = portNoController.text;
            apiData.currency = _selectedCurrency!;
            apiData.voice = _selectedVoice!;
            apiData.clientID = clientIDController.text;
            apiData.actCode = activationController.text;
            apiData.imageScroll = _imgScrollCheck.toString();
            apiData.videoScroll = _videoScrollCheck.toString();
            apiData.textScroll = _textScrollCheck.toString();
            DateTime now = DateTime.now();
            String formattedDate =
                DateFormat('yyyy-MM-dd HH:mm:ss').format(now);
            apiData.dateTime = formattedDate;
          });
          if (apiData != null) {
            _addStatusMessage('SAVING DATA TO DATABASE...');
            Logger.log('SAVING DATA TO DATABASE...', level: LogLevel.info);
            if (await dbProvider.insertApiData(apiData)) {
              _addStatusMessage('DATA SAVED...');
              Logger.log('DATA SAVED...', level: LogLevel.info);
            }
          } else {
            _addStatusMessage('PLEASE SELECT ALL OPTIONS...');
            Logger.log('PLEASE SELECT ALL OPTIONS...', level: LogLevel.info);
          }
        }
      },
      child: Container(
        width: MediaQuery.of(context).size.width / 2.5,
        height: 50,
        alignment: Alignment.center,
        decoration: const BoxDecoration(
          borderRadius: BorderRadius.all(Radius.circular(10)),
          color: Colors.blueAccent,
        ),
        child: Text(
          'SAVE',
          style: TextStyle(
              fontSize: fontSizes.baseFontSize,
              color: Colors.black), // Adjusted font size to match others
        ),
      ),
    );
  }

  Widget _currencyDropdown() {
    return Container(
      width: MediaQuery.of(context).size.width / 2.5,
      height: 50,
      alignment: Alignment.center,
      child: DropdownButtonFormField<String>(
        value: _selectedCurrency,
        items: currencyCodes.map((String currency) {
          return DropdownMenuItem<String>(
            value: currency,
            child: Center(
              child: Text(currency,
                  textAlign: TextAlign.center), // Centering the text
            ),
          );
        }).toList(),
        onChanged: (String? newValue) {
          setState(() {
            _selectedCurrency = newValue;
          });
        },
        decoration: InputDecoration(
          isDense: true,
          prefixIcon: Padding(
            padding: EdgeInsets.only(left: 0),
            child: Icon(
              Icons.money,
              size: fontSizes.largerFontSize4,
              color: Colors.blue,
            ),
          ),
          fillColor: Colors.black,
          border: OutlineInputBorder(
            borderSide: const BorderSide(color: Colors.black, width: 5.00),
            borderRadius: BorderRadius.circular(2.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderSide: const BorderSide(color: Colors.blue),
            borderRadius: BorderRadius.circular(2.0),
          ),
          labelText: 'CURRENCY',
          labelStyle: TextStyle(
            color: Colors.black,
            fontSize: fontSizes.baseFontSize,
          ),
        ),
        style: TextStyle(
            fontSize: fontSizes.baseFontSize, height: 1, color: Colors.black),
      ),
    );
  }

  Widget _voiceDropdown() {
    return Container(
      width: MediaQuery.of(context).size.width / 2.5,
      height: 50,
      alignment: Alignment.center,
      child: DropdownButtonFormField<String>(
        value: _selectedVoice,
        items: voiceCodes.map((String currency) {
          return DropdownMenuItem<String>(
            value: currency,
            child: Center(
              child: Text(currency,
                  textAlign: TextAlign.center), // Centering the text
            ),
          );
        }).toList(),
        onChanged: (String? newValue) {
          setState(() {
            _selectedVoice = newValue;
          });
        },
        decoration: InputDecoration(
          isDense: true,
          prefixIcon: Padding(
            padding: EdgeInsets.only(left: 0),
            child: Icon(
              Icons.mic,
              size: fontSizes.largerFontSize4,
              color: Colors.blue,
            ),
          ),
          fillColor: Colors.black,
          border: OutlineInputBorder(
            borderSide: const BorderSide(color: Colors.black, width: 5.00),
            borderRadius: BorderRadius.circular(2.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderSide: const BorderSide(color: Colors.blue),
            borderRadius: BorderRadius.circular(2.0),
          ),
          labelText: 'VOICE',
          labelStyle: TextStyle(
            color: Colors.black,
            fontSize: fontSizes.baseFontSize,
          ),
        ),
        style: TextStyle(
            fontSize: fontSizes.baseFontSize, height: 1, color: Colors.black),
      ),
    );
  }

  Widget _initButton() {
    return InkWell(
      onTap: () async {
        _addStatusMessage('INIT BUTTON PRESSED');
      },
      child: Container(
        width: MediaQuery.of(context).size.width / 2.5,
        height: 50,
        alignment: Alignment.center,
        decoration: const BoxDecoration(
          borderRadius: BorderRadius.all(Radius.circular(10)),
          color: Colors.lightGreen,
        ),
        child: Text(
          'INIT',
          style: TextStyle(
              fontSize: fontSizes.baseFontSize,
              color: Colors.black), // Adjusted font size to match others
        ),
      ),
    );
  }

  Widget _resetButton() {
    return InkWell(
      onTap: () async {
        // Your onTap action here
      },
      child: Container(
        width: MediaQuery.of(context).size.width / 2.5,
        height: 50,
        alignment: Alignment.center,
        decoration: const BoxDecoration(
          borderRadius: BorderRadius.all(Radius.circular(10)),
          color: Colors.orange,
        ),
        child: Text(
          'RESET',
          style: TextStyle(
              fontSize: fontSizes.baseFontSize,
              color: Colors.black), // Adjusted font size to match others
        ),
      ),
    );
  }

  Widget _clientID() {
    return Container(
      width: MediaQuery.of(context).size.width / 2.5,
      height: 50,
      alignment: Alignment.center,
      child: TextFormField(
        keyboardType: const TextInputType.numberWithOptions(decimal: true),
        inputFormatters: [
          LengthLimitingTextInputFormatter(15),
        ],
        onEditingComplete: () {
          FocusScope.of(context).requestFocus(_focusNodePort);
        },
        textAlign: TextAlign.left,
        focusNode: _focusNodeClientID,
        autofocus: false,
        obscureText: false,
        controller: clientIDController,
        style: TextStyle(
            fontSize: fontSizes.baseFontSize, height: 1, color: Colors.black),
        decoration: InputDecoration(
          isDense: true,
          prefixIcon: Padding(
            padding: const EdgeInsets.only(left: 0),
            child: Icon(
              Icons.perm_identity,
              size: fontSizes.largerFontSize4,
              color: Colors.blue,
            ),
          ),
          fillColor: Colors.black,
          border: OutlineInputBorder(
            borderSide: const BorderSide(color: Colors.black, width: 5.00),
            borderRadius: BorderRadius.circular(2.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderSide: const BorderSide(color: Colors.blue),
            borderRadius: BorderRadius.circular(2.0),
          ),
          labelText: ' CLIENT ID',
          labelStyle:
              TextStyle(color: Colors.black, fontSize: fontSizes.baseFontSize),
        ),
      ),
    );
  }

  Widget _activationBar() {
    return Container(
        width: MediaQuery.of(context).size.width / 2.5,
        height: 50,
        alignment: Alignment.center,
        child: TextFormField(
            keyboardType: const TextInputType.numberWithOptions(decimal: true),
            inputFormatters: [
              FilteringTextInputFormatter.allow(RegExp(r'[0-9]')),
              LengthLimitingTextInputFormatter(6),
            ],
            onEditingComplete: () => FocusScope.of(context).nextFocus(),
            textAlign: TextAlign.left,
            focusNode: _focusNodeActivation,
            autofocus: false,
            obscureText: false,
            controller: activationController,
            style: TextStyle(
                fontSize: fontSizes.baseFontSize,
                height: 1,
                color: Colors.black),
            decoration: InputDecoration(
              isDense: true,
              prefixIcon: Padding(
                padding: EdgeInsets.only(left: 0),
                child: Icon(
                  Icons.key,
                  size: fontSizes.largerFontSize4,
                  color: Colors.blue,
                ),
              ),
              fillColor: Colors.white,
              border: OutlineInputBorder(
                borderSide: const BorderSide(color: Colors.black, width: 5.00),
                borderRadius: BorderRadius.circular(2.0),
              ),
              focusedBorder: OutlineInputBorder(
                borderSide: const BorderSide(color: Colors.blue),
                borderRadius: BorderRadius.circular(2.0),
              ),
              labelText: ' ACTIVATION',
              labelStyle: TextStyle(
                  color: Colors.black, fontSize: fontSizes.baseFontSize),
            )));
  }

  Widget _registerBTN() {
    return InkWell(
      onTap: () async {
        var actData = await getAndroidMacAddress();
        _addStatusMessage(actData);
        print(actData);
        setState(() {
          activationController.text = actData;
          clientIDController.text = randomID();
        });
      },
      child: Container(
        width: MediaQuery.of(context).size.width / 2.5,
        height: 50,
        alignment: Alignment.center,
        decoration: const BoxDecoration(
          borderRadius: BorderRadius.all(Radius.circular(10)),
          color: Colors.green,
        ),
        child: Text(
          'REGISTER',
          style: TextStyle(
              fontSize: fontSizes.baseFontSize,
              color: Colors.black), // Adjusted font size to match others
        ),
      ),
    );
  }

  Widget _deRegister() {
    return InkWell(
      onTap: () async {
        // Your onTap action here
      },
      child: Container(
        width: MediaQuery.of(context).size.width / 2.5,
        height: 50,
        alignment: Alignment.center,
        decoration: const BoxDecoration(
          borderRadius: BorderRadius.all(Radius.circular(10)),
          color: Colors.indigoAccent,
        ),
        child: Text(
          'CLEAR',
          style: TextStyle(
              fontSize: fontSizes.baseFontSize,
              color: Colors.black), // Adjusted font size to match others
        ),
      ),
    );
  }

  Widget _messageBox(fontSizes) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: <Widget>[
        Container(
          padding: const EdgeInsets.all(10.0),
          width: MediaQuery.of(context).size.width / 2.25,
          height: MediaQuery.of(context).size.height / 2,
          // margin: const EdgeInsets.all(5),
          decoration: BoxDecoration(
            color: Colors.green,
            borderRadius: BorderRadius.circular(5.0),
            border: Border.all(
              color: Colors.white30,
              width: 1.0,
            ),
          ),
          child: Align(
            alignment: Alignment.topLeft,
            child: SingleChildScrollView(
              controller: _scrollController,
              scrollDirection: Axis.vertical,
              child: Column(
                crossAxisAlignment:
                    CrossAxisAlignment.start, // Ensure alignment to the start
                children: <Widget>[
                  for (var message in statusMessages)
                    Text(
                      message,
                      style: TextStyle(
                        fontFamily: fontFamily,
                        fontSize: fontSizes.smallerFontSize2,
                        fontStyle: FontStyle.normal,
                        color: Colors.black,
                      ),
                    ),
                ],
              ),
            ),
          ),
        )
      ],
    );
  }

  Widget _configBox() {
    return Container(
      padding: const EdgeInsets.all(10.0),
      width: MediaQuery.of(context).size.width / 2,
      height: MediaQuery.of(context).size.height / 2,
      margin: const EdgeInsets.all(5),
      decoration: BoxDecoration(
        color: Colors.transparent,
        borderRadius: BorderRadius.circular(5.0),
        border: Border.all(
          color: Colors.blueAccent,
          width: 1.0,
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.center,
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: <Widget>[
          Row(
            crossAxisAlignment: CrossAxisAlignment.center,
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              _imageScroll(),
              _videoScroll(),
              _textScroll(),
            ],
          ),
          if (_selectedScrollOption == 'IMAGE')
          Row(
        mainAxisAlignment: MainAxisAlignment.center,
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          Text(
            'IMAGE SCROLL IN: ',
            style: TextStyle(
              fontSize: fontSizes.baseFontSize,
              fontWeight: FontWeight.bold,
            ),
          ),
          IconButton(
            icon: const Icon(Icons.remove),
            onPressed: _decrement,
            color: Colors.red,
            padding: EdgeInsets.zero, // Remove padding from IconButton
            constraints: const BoxConstraints(), // Remove default constraints
          ),
          const SizedBox(width: 10), // Space between button and text
          Text(
            '$_imgScrollCount SEC',
            style: TextStyle(
              fontSize: fontSizes.baseFontSize,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(width: 10), // Space between text and plus button
          IconButton(
            icon: const Icon(Icons.add),
            onPressed: _increment,
            color: Colors.red,
            padding: EdgeInsets.zero, // Remove padding from IconButton
            constraints: const BoxConstraints(), // Remove default constraints
          ),
        ],
      ),
        ],
      ),
    );
  }

  String? validateIpAddress(String? value) {
    // Regular expression to match valid IPv4 addresses
    const String pattern =
        r'^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])$';
    final RegExp regExp = RegExp(pattern);

    if (value == null || value.isEmpty) {
      return 'IP Address is required';
    } else if (!regExp.hasMatch(value)) {
      return 'Enter a valid IP Address';
    }
    return null; // Valid IP
  }

  Widget _imageScroll() {
    return Container(
      width: MediaQuery.of(context).size.width / 7.5,
      alignment: Alignment.center,
      child: RadioListTile<String>(
        value: 'IMAGE', // The value of this RadioListTile
        groupValue:
            _selectedScrollOption, // The currently selected option in the group
        onChanged: (String? newValue) {
          setState(() {
            _selectedScrollOption = newValue!;
            _imgScrollCheck = true;
            _videoScrollCheck = false;
          });
        },
        title: Text(
          'IMAGE',
          style:
              TextStyle(fontSize: fontSizes.baseFontSize, color: Colors.blue),
        ),
        controlAffinity: ListTileControlAffinity
            .leading, // Optional: position radio to the left
        contentPadding: EdgeInsets.zero, // Optional: remove extra padding
      ),
    );
  }

  Widget _videoScroll() {
    return Container(
      width: MediaQuery.of(context).size.width / 7.5,
      alignment: Alignment.center,
      child: RadioListTile<String>(
        value: 'VIDEO', // The value of this RadioListTile
        groupValue:
            _selectedScrollOption, // The currently selected option in the group
        onChanged: (String? newValue) {
          setState(() {
            _selectedScrollOption = newValue!;
            _imgScrollCheck = false;
            _videoScrollCheck = true;
          });
        },
        title: Text(
          'VIDEO',
          style:
              TextStyle(fontSize: fontSizes.baseFontSize, color: Colors.blue),
        ),
        controlAffinity: ListTileControlAffinity
            .leading, // Optional: position radio to the left
        contentPadding: EdgeInsets.zero, // Optional: remove extra padding
      ),
    );
  }

  Widget _textScroll() {
    return Container(
      width: MediaQuery.of(context).size.width / 7.5,
      alignment: Alignment.center,
      child: CheckboxListTile(
        value: _textScrollCheck, // The current state (selected or not)
        onChanged: (bool? newValue) {
          setState(() {
            _textScrollCheck = newValue ?? false; // Toggle the selection
          });
        },
        title: Text(
          'TEXT',
          style:
              TextStyle(fontSize: fontSizes.baseFontSize, color: Colors.blue),
        ),
        controlAffinity:
            ListTileControlAffinity.leading, // Checkbox on the left
        contentPadding: EdgeInsets.zero, // Remove extra padding
      ),
    );
  }

  void _addStatusMessage(String message) {
    String currentTime = DateFormat('hh:mm:ss a').format(DateTime.now());
    setState(() {
      statusMessages.add('$currentTime: $message');
    });
    Timer(const Duration(milliseconds: 100), () {
      _scrollController.animateTo(
        _scrollController.position.maxScrollExtent,
        duration: const Duration(milliseconds: 100),
        curve: Curves.easeOut,
      );
    });
  }

  Future<String> getAndroidMacAddress() async {
    final deviceInfoPlugin = DeviceInfoPlugin();
    try {
      final androidInfo = await deviceInfoPlugin.androidInfo;
      setState(() {
        actRandom = false;
      });
      return androidInfo.serialNumber ?? randomID();
    } catch (e) {
      setState(() {
        actRandom = true;
      });
      return randomID();
    }
  }

  String randomID() {
    const String chars =
        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    Random random = Random();
    setState(() {
      actRandom = true;
    });
    return List.generate(15, (index) => chars[random.nextInt(chars.length)])
        .join();
  }

  bool validateSysConfigData() {
    if (ipAddressController != null && ipAddressController != '') {
      if (portNoController != null && portNoController != '') {
        if (currencyCodes != null && currencyCodes != '') {
          if (voiceCodes != null && voiceCodes != '') {
            if (clientIDController != null && clientIDController != '') {
              if (voiceCodes != null && voiceCodes != '') {
                return true;
              }
            }
          }
        }
      }
    }
    return false;
  }

  void loadDbData() async {
    apiData = (await dbProvider.getApiData())!;
    if (apiData != null) {
      _addStatusMessage('DB DATA LOADED...');
      Logger.log('DB DATA LOADED...', level: LogLevel.info);
      ipAddressController.text = apiData.serverIP;
      portNoController.text = apiData.portNo;
      _selectedCurrency = apiData.currency;
      _selectedVoice = apiData.voice;
      clientIDController.text = apiData.clientID;
      activationController.text = apiData.actCode;
      _imgScrollCheck = apiData.imageScroll.toLowerCase() == 'true';
      _videoScrollCheck = apiData.videoScroll.toLowerCase() == 'true';
      _textScrollCheck = apiData.textScroll.toLowerCase() == 'true';
      if(_imgScrollCheck){
        _selectedScrollOption = 'IMAGE';
        Logger.log('_selectedScrollOption = IMAGE', level: LogLevel.info);
      }
      else if(_videoScrollCheck){
        _selectedScrollOption = 'VIDEO';
        Logger.log('_selectedScrollOption = VIDEO', level: LogLevel.info);
      }
      else(_textScrollCheck){
          Logger.log('TEXT SCROLL = ${_textScrollCheck}', level: LogLevel.info);
        };
      if (apiData.clientID != await getAndroidMacAddress()) {
        _addStatusMessage('CLIENT ID NOT MATCHING...');
        Logger.log('CLIENT ID NOT MATCHING...', level: LogLevel.info);
        //TODO
      }
    } else {
      _addStatusMessage('NO VALUE IN DATABASE...');
      Logger.log('NO VALUE IN DATABASE...', level: LogLevel.info);
    }
  }

  void _increment() {
    setState(() {
      _imgScrollCount++;
    });
  }

  void _decrement() {
    setState(() {
      if (_imgScrollCount > 1 && _imgScrollCount!=0) _imgScrollCount--;
    });
  }

  @override
  Widget build(BuildContext context) {
    fontSizes = FontSizes.fromContext(context);
    return Scaffold(
      body: SingleChildScrollView(
        child: Container(
          padding: const EdgeInsets.symmetric(horizontal: 20),
          height: MediaQuery.of(context).size.height,
          width: MediaQuery.of(context).size.width,
          color: Colors.white,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.center,
            mainAxisAlignment: MainAxisAlignment.start,
            children: <Widget>[
              SizedBox(
                height: MediaQuery.of(context).size.height / 250,
              ),
              _title(),
              SizedBox(
                height: MediaQuery.of(context).size.height / 150,
              ),
              Row(
                crossAxisAlignment: CrossAxisAlignment.center,
                mainAxisAlignment: MainAxisAlignment.start,
                children: <Widget>[
                  Expanded(
                    flex: 2,
                    child: _ipAddress(),
                  ),
                  const SizedBox(width: 10), // Add space between widgets
                  Expanded(
                    flex: 2,
                    child: _portNo(),
                  ),
                  const SizedBox(width: 10), // Add space between widgets
                  Expanded(
                    flex: 1,
                    child: _testButton(),
                  ),
                  const SizedBox(width: 10), // Add space between widgets
                  Expanded(
                    flex: 1,
                    child: _saveButton(),
                  ),
                ],
              ),
              SizedBox(
                height: MediaQuery.of(context).size.height / 50,
              ),
              Row(
                crossAxisAlignment: CrossAxisAlignment.center,
                mainAxisAlignment: MainAxisAlignment.start,
                children: <Widget>[
                  Expanded(
                    flex: 2,
                    child: _currencyDropdown(),
                  ),
                  const SizedBox(width: 10), // Add space between widgets
                  Expanded(
                    flex: 2,
                    child: _voiceDropdown(),
                  ),
                  const SizedBox(width: 10), // Add space between widgets
                  Expanded(
                    flex: 1,
                    child: _initButton(),
                  ),
                  const SizedBox(width: 10), // Add space between widgets
                  Expanded(
                    flex: 1,
                    child: _resetButton(),
                  ),
                ],
              ),
              SizedBox(height: MediaQuery.of(context).size.height / 50),
              Row(
                crossAxisAlignment: CrossAxisAlignment.center,
                mainAxisAlignment: MainAxisAlignment.start,
                children: <Widget>[
                  Expanded(
                    flex: 2,
                    child: _clientID(),
                  ),
                  const SizedBox(width: 10), // Add space between widgets
                  Expanded(
                    flex: 2,
                    child: _activationBar(),
                  ),
                  const SizedBox(width: 10), // Add space between widgets
                  Expanded(
                    flex: 1,
                    child: _registerBTN(),
                  ),
                  const SizedBox(width: 10), // Add space between widgets
                  Expanded(
                    flex: 1,
                    child: _deRegister(),
                  ),
                ],
              ),
              SizedBox(
                height: MediaQuery.of(context).size.height / 50,
              ),
              Row(
                  crossAxisAlignment: CrossAxisAlignment.center,
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: <Widget>[
                    _messageBox(fontSizes),
                    _configBox(),
                  ]),
            ],
          ),
        ),
      ),
    );
  }
}
